# SPDX-License-Identifier: BSD-2-Clause
# Copyright (c) 2024, daniyl-x


- name: Manage packages
  hosts: all
  become: true

  vars:
    required_packages:
      - git

  tasks:
    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_facts["os_family"] == "Debian"

    - name: Update packages
      package:
        name: "*"
        state: latest

    - name: Install packages
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ packages + required_packages }}"

    - name: Get out!
      package:
        name: "{{ item }}"
        state: absent
      loop:
        - nano


- name: Configure system
  hosts: all
  become: true

  tasks:
    - name: Disable SSH server options
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^({{ item }} (?!no)|#{{ item }}).*"
        replace: "{{ item }} no"
      loop:
        - PasswordAuthentication
        - PermitRootLogin
      notify: Restart SSH server

    - name: Enable current user lingering
      file:
        path: "/var/lib/systemd/linger/{{ ansible_user }}"
        state: touch
        modification_time: preserve
        access_time: preserve

    - name: Reduce swappiness
      sysctl:
        name: vm.swappiness
        value: 10
      notify: Reboot

  handlers:
    - name: Restart SSH server
      service:
        name: sshd
        state: restarted

    - name: Reboot
      reboot:


- name: Install dotfiles
  hosts: all

  vars:
    dotfiles_dir: "{{ ansible_user_dir }}/dotfiles"

  pre_tasks:
    - name: Pull dotfiles
      git:
        repo: "https://github.com/daniyl-x/dotfiles"
        dest: "{{ dotfiles_dir }}"

    - name: Enumerate dotfiles directories
      find:
        paths: "{{ dotfiles_dir }}"
        file_type: directory
        # This parameter uses globs, not regex
        excludes: ".*"
      register: available_dotfiles

    - name: Process and store available dotfiles
      set_fact:
        available_dotfiles: >
          {{ available_dotfiles.files | map(attribute='path')
          | map('basename') | list }}"

    - name: Copy dotfiles to ~/
      copy:
        src: "{{ dotfiles_dir }}/{{ item }}/"
        dest: "{{ ansible_user_dir }}"
        remote_src: true
      loop: "{{ dotfiles }}"
      when: item in available_dotfiles

  roles:
    - role: bash_dotfiles
      when: "'bash' in dotfiles"

    - role: vim_dotfiles
      when: "'vim' in dotfiles"

